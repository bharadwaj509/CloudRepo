import java.io.IOException;
import java.util.HashMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;


public class FinalDWDM {
	
	
	public static class Map1 extends Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String doc = value.toString();
			String docPart[] = doc.split(" "); // spliting input string to get
												// individual words
			String docName = docPart[0]; // getting the document number or the
											// document name
			String tempStr = ""; // temp string to construct the key part
			// loop to collect all the words
			// for loop counter i is starting as we have first element of each
			// line as document number
			for (int i = 1; i < docPart.length; i++) {
				tempStr = docPart[i].replaceAll("\\p{P}", ""); // removing
																// special
																// character and
																// punctuation
																// from the word
				tempStr = tempStr + "," + docName;
				word.set(tempStr);// converting string to text writable
				context.write(word, one);
			}
		}
	}

	public static class Reduce1 extends Reducer<Text, IntWritable, Text, IntWritable> {
		HashMap<String, Integer> maxList = new HashMap<String, Integer>();
		HashMap<String, Integer> redOutputList = new HashMap<String, Integer>();
		

		public void reduce(Text key, Iterable<IntWritable> values, Context context)
				throws IOException, InterruptedException {
			int sum = 0;
			for (IntWritable val : values) {
				sum += val.get();
			}
			context.write(key, new IntWritable(sum));
		}

	}


	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();

		Job job = new Job(conf, "PhaseOne");

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setJarByClass(PhaseOne.class);

		job.setMapperClass(Map1.class);
		job.setReducerClass(Reduce1.class);

		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		if(job.waitForCompletion(true)){
			Configuration conf2 = new Configuration();

			Job job2 = new Job(conf2, "PhaseOne");

			job2.setOutputKeyClass(Text.class);
			job2.setOutputValueClass(IntWritable.class);
			job2.setJarByClass(PhaseOne.class);

			job2.setMapperClass(Map2.class);
			job2.setReducerClass(Reduce2.class);

			job2.setInputFormatClass(TextInputFormat.class);
			job2.setOutputFormatClass(TextOutputFormat.class);

			FileInputFormat.addInputPath(job2, new Path(args[0]));
			FileOutputFormat.setOutputPath(job2, new Path(args[1]));
			
			if(job2.waitForCompletion(true)){
				Configuration conf3 = new Configuration();

				Job job3 = new Job(conf3, "PhaseOne");

				job3.setOutputKeyClass(Text.class);
				job3.setOutputValueClass(IntWritable.class);
				job3.setJarByClass(PhaseOne.class);

				job3.setMapperClass(Map3.class);
				job3.setReducerClass(Reduce3.class);

				job3.setInputFormatClass(TextInputFormat.class);
				job3.setOutputFormatClass(TextOutputFormat.class);

				FileInputFormat.addInputPath(job3, new Path(args[0]));
				FileOutputFormat.setOutputPath(job3, new Path(args[1]));

				job2.waitForCompletion(true);
			}
			
		}
	}
}
